<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>The coding morsels of Luke Alex Davis</title><description>My RSS feed of coding snippets.</description><link>https://lukealexdavis.co.uk/</link><item><title>Morsel #12: styling a WordPress post to look like a Bluesky post</title><link>https://lukealexdavis.co.uk/posts/morsel-12/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-12/</guid><pubDate>Wed, 22 May 2024 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Even though I&apos;ve deleted Twitter, I miss just throwing a thought out into the ether. WordPress has &lt;a href=&quot;https://developer.wordpress.org/advanced-administration/wordpress/post-formats/&quot;&gt;post formats&lt;/a&gt; that can facilitate that. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aside: like a note&lt;/li&gt;
&lt;li&gt;gallery: a gallery of images&lt;/li&gt;
&lt;li&gt;link: a link to another site (great for &lt;a href=&quot;/linkblog/&quot;&gt;linkblogs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;image: a single image&lt;/li&gt;
&lt;li&gt;quote: a quote&lt;/li&gt;
&lt;li&gt;status: a status update, similar to a tweet&lt;/li&gt;
&lt;li&gt;video: a video or video playlist&lt;/li&gt;
&lt;li&gt;audio: an audio file or playlist&lt;/li&gt;
&lt;li&gt;chat: a chat transcript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these I probably wouldn&apos;t much if at all but status intrigued me. I already use asides on all of my blogs front page but I wanted something different for those quick quips or musings. Because a lot of modern WordPress themes don&apos;t come with post formats out of the box, you have to enable them so I added this to my theme&apos;s functions.php file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add_theme_support( &apos;post-formats&apos;, array( &apos;POST_FORMAT_NAME&apos; ) );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you have to create a template for your format(s) (unless your theme has them already) and that&apos;s where I had to get really creative. Here&apos;s what a Bluesky post looks like:&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&quot;/images/bluesky-post.jpg&quot; alt=&quot;a bluesky post by me that says bleh&quot; loading=&quot;lazy&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;To get that working, I wrote a function in the template-tags.php file in my inc folder that retrieved my author name, my website (since it was also my Bluesky handle), and my avatar. All this info was accessible via the &lt;code&gt;get_the_author_meta()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function status_author() {
    $author_avatar = get_avatar( get_the_author_meta( &apos;ID&apos; ), 64 );
    $author_name = get_the_author_meta(&apos;user_firstname&apos;) . &apos; &apos; . get_the_author_meta(&apos;user_lastname&apos;);
    $url_cleanup = array(&quot;https://&quot; =&amp;gt; &quot;&quot;, &quot;/&quot; =&amp;gt; &quot;&quot;);
    $author_url = strtr(get_the_author_meta(&apos;url&apos;), $url_cleanup);
    echo &apos;&amp;lt;div class=&quot;status-author-meta&quot;&amp;gt;&apos; . &apos;&amp;lt;div class=&quot;status-author-meta-avatar&quot;&amp;gt;&apos; . $author_avatar . &apos;&amp;lt;/div&amp;gt;&apos; . &apos;&amp;lt;div class=&quot;status-author-meta-text&quot;&amp;gt;&apos; . &apos;&amp;lt;span&amp;gt;&apos; . $author_name. &apos;&amp;lt;/span&amp;gt;&apos; . &apos;&amp;lt;span&amp;gt;&apos; . &apos;@&apos; . $author_url . &apos;&amp;lt;/span&amp;gt;&apos; . &apos;&amp;lt;/div&amp;gt;&apos; . &apos;&amp;lt;/div&amp;gt;&apos;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also added a bit to get rid of the URL scheme and all the slashes. Nice and neat! Then, I added the status_author() function to my template file (content-status.php):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php if ( is_single() ) : ?&amp;gt;
        &amp;lt;h1 class=&quot;entry-title&quot;&amp;gt;
            &amp;lt;?php print_post_title(); ?&amp;gt;
        &amp;lt;/h1&amp;gt;
&amp;lt;?php else : ?&amp;gt;
    &amp;lt;?php status_author(); ?&amp;gt;
    &amp;lt;div class=&quot;byline-text&quot; style=&quot;margin-bottom:1rem;&quot;&amp;gt;
        &amp;lt;?php the_content(); ?&amp;gt;                 
    &amp;lt;/div&amp;gt;
    &amp;lt;?php status_posted_on(); ?&amp;gt;
&amp;lt;?php endif; ?&amp;gt;

&amp;lt;?php if ( is_single() ) : ?&amp;gt;
    &amp;lt;br&amp;gt;
&amp;lt;?php endif; ?&amp;gt;

&amp;lt;?php 

if ( &apos;post&apos; === get_post_type() ) : ?&amp;gt;

&amp;lt;?php
endif; ?&amp;gt;
&amp;lt;/section&amp;gt;&amp;lt;!-- .entry-header --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this says is to check if the page is a &quot;single&quot;—like a blog post—and if it is, add the title, otherwise add the status author info, the status text, and the date it was posted. I added some CSS to make mimic the Bluesky post design:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* please don&apos;t roast my CSS, I&apos;m not a web dev!!! */

.status-author-meta, .status-author-meta-text, .status-author-meta-avatar {
    display: flex;
}

.status-author-meta {
    margin-bottom: 1rem;
}

.status-author-meta-text {
    flex-direction: column;
    justify-content: center;
    margin-left: 1rem;
    letter-spacing: 0.25px;
}

.status-author-meta-text span:first-child {
    font-size: 1.25rem;
    font-weight: 700;
}

.status-author-meta-text span:nth-child(2) {
    font-size: 1rem;
}

.status-author-meta-avatar img {
    border-radius: 50%;
}

.status-author-meta + .byline-text a {
    font-weight: 700;
    text-decoration: underline;
}

.status-author-meta + .byline-text a:hover {
    text-decoration: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &amp;lt;span lang=&quot;fr&quot;&amp;gt;voilà&amp;lt;/span&amp;gt;!&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&quot;/images/status-post.jpg&quot; alt=&quot;a wordpress status post that says &apos;imagining a world where SEGA still made hardware and they battled with Nintendo in the 2000s and 2010s for handheld dominance&apos;&quot; loading=&quot;lazy&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;Of course, how I put this together was specific to my setup and theme but the fundamental techniques are universal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add theme support for formats&lt;/li&gt;
&lt;li&gt;write the functions to get the author data&lt;/li&gt;
&lt;li&gt;output it in a template&lt;/li&gt;
&lt;li&gt;style it with CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reclaim your status updates!&lt;/p&gt;
</content:encoded></item><item><title>Morsel #11: how to check if a DOM element is in the viewport</title><link>https://lukealexdavis.co.uk/posts/morsel-11/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-11/</guid><pubDate>Tue, 21 May 2024 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my line of work, I struggle with finding DOM elements that cause issues but are otherwise hidden—by &lt;code&gt;display:none&lt;/code&gt;—or obscured by above-the-fold menus. I came across the latter the other day and the issue was lazy-loading. I wasn&apos;t sure whether the element classed as &quot;in the viewport&quot; despite not being immediately seen by the user unless they unfolded the menu.&lt;/p&gt;
&lt;p&gt;So I looked for a way to check and came across a JavaScript method called &lt;code&gt;getBoundingClientRect()&lt;/code&gt;. It returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMRect&quot;&gt;DOMRect object&lt;/a&gt; that shows the size (width and height) and position (x and y coordinates) of an element in relation to the viewport.&lt;/p&gt;
&lt;p&gt;There are other ways to do it but this seemed the easiest for me (and coolest because I&apos;d never heard of it before). &lt;a href=&quot;https://www.geeksforgeeks.org/how-to-check-a-dom-element-is-visible-in-current-viewport/&quot;&gt;Here&apos;s an example taken from Geeks for Geeks&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function myfunction(value) {
    const item = value.getBoundingClientRect();
    return (
        item.top &amp;gt;= 0 &amp;amp;&amp;amp;
        item.left &amp;gt;= 0 &amp;amp;&amp;amp;
        item.bottom &amp;lt;= (
            window.innerHeight ||
            document.documentElement.clientHeight) &amp;amp;&amp;amp;
        item.right &amp;lt;= (
            window.innerWidth ||
            document.documentElement.clientWidth)
    );
}

const elementToCheck = document.getElementById(&apos;div1&apos;);

window.addEventListener(&apos;scroll&apos;, () =&amp;gt; {
    if (myfunction(elementToCheck)) {
        console.log(&apos;Element is visible in viewport&apos;);
    } else {
        console.log(&apos;Element is not visible in viewport&apos;);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After I put my element in as the value of &lt;code&gt;elementToCheck&lt;/code&gt;, it came up as &quot;in the viewport&quot; and therefore shouldn&apos;t be lazy-loaded. Easy fix!&lt;/p&gt;
</content:encoded></item><item><title>Morsel #10: Ticking all the boxes</title><link>https://lukealexdavis.co.uk/posts/morsel-10/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-10/</guid><pubDate>Tue, 23 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I was trying to create a data report and needed to tick checkboxes to include certain information. Unfortunately, there were over 500 boxes and no option for selecting all of them so I Googled how to do it using JavaScript + the browser console.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/386281/how-to-implement-select-all-check-box-in-html&quot;&gt;Stack Overflow came through for me&lt;/a&gt; and I thought I&apos;d share the answer here (thanks to &lt;a href=&quot;https://stackoverflow.com/users/8112776/ashleedawg&quot;&gt;ashleedawg&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to tick all checkboxes in your browser&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open your browser&apos;s console (the shortcut is usually Cmd/Ctrl+Shift+I (Chrome) or Cmd/Ctrl+Shift+I (Brave))&lt;/li&gt;
&lt;li&gt;Enter the following: &amp;lt;code&amp;gt;$(&quot;input:checkbox&quot;).attr(&apos;checked&apos;, true)&amp;lt;/code&amp;gt; (make sure to change &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; to &amp;lt;code&amp;gt;True&amp;lt;/code&amp;gt; for Firefox)&lt;/li&gt;
&lt;li&gt;Press Cmd/Ctrl+Enter to fire it and all the checkboxes should be checked!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&apos;ve only tested this on one website on Brave and Firefox so feel free to email me if it doesn&apos;t work for you!&lt;/p&gt;
</content:encoded></item><item><title>Morsel #9: Oapy</title><link>https://lukealexdavis.co.uk/posts/morsel-9/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-9/</guid><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My ninth morsel is a work one.&lt;/p&gt;
&lt;p&gt;Oapy is a web app that uses OpenAI&apos;s GPT models to generate &lt;a href=&quot;/jardim/tech/seo/&quot;&gt;SEO&lt;/a&gt; content at scale. That means anything from metadata (titles and descriptions) to category copy. But with the Playground mode (similar to OpenAI&apos;s Playground tool), you can generate any kind of written content.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://oapy-impression.streamlit.app/&quot;&gt;Oapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.impressiondigital.com/resources/tools/oapy/&quot;&gt;Impression guide to Oapy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Internet access (no code necessary!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to use&lt;/h2&gt;
&lt;p&gt;Follow the Impression guide above to find out how to use Oapy.&lt;/p&gt;
&lt;h2&gt;Python functions used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-dicts/&quot;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-conditional-statements/&quot;&gt;If statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/defining-your-own-python-function/&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/ForLoop&quot;&gt;For-loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-lists-tuples/#python-lists&quot;&gt;Lists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/list-comprehension-python/#using-list-comprehensions&quot;&gt;List comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Morsel #8: Bandcamp Album Length Calculator</title><link>https://lukealexdavis.co.uk/posts/morsel-8/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-8/</guid><pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My eighth morsel is a &lt;a href=&quot;/jardim/tech/python/&quot;&gt;Python&lt;/a&gt; script that returns the running time of an album from Bandcamp in your CLI of choice. I previously used a JS plugin/applet in my browser but it stopped working and couldn&apos;t find a replacement (there probably is one but I also don&apos;t like installing add-ons unless I have to because Chromium browsers already hog enough memory!)&lt;/p&gt;
&lt;p&gt;Then I thought &quot;why not create a quick script to do the job?&quot;. I have also made this into a Streamlit app but that&apos;ll be coming in a future morsel. In the meantime, I discovered argparse and thought it&apos;d be handy for me to have everything run in my CLI and print out the album length. No frills!&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/starchildluke/bandcamp_calc&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Beautiful Soup&lt;/li&gt;
&lt;li&gt;Requests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to use&lt;/h2&gt;
&lt;p&gt;In your command line, enter &lt;code&gt;python3 bandcamp_calc.py -u [URL]&lt;/code&gt; and it will print out the running time in seconds.&lt;/p&gt;
&lt;h2&gt;Python functions used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-lists-tuples/#python-lists&quot;&gt;Lists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/list-comprehension-python/#using-list-comprehensions&quot;&gt;List comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-for-loop/&quot;&gt;For loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-sum-function/&quot;&gt;sum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/datetime.html&quot;&gt;datetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;argparse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Morsel #7: Random Pokémon Team Generator</title><link>https://lukealexdavis.co.uk/posts/morsel-7/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-7/</guid><pubDate>Fri, 22 Jul 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;/p&gt;
&lt;p&gt;My seventh morsel is a script that generate a random team based on all fully evolved Pokémon from Red/Blue/Yellow (excluding Legendaries and Mythicals).&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/starchildluke/random-pokemon-team&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://starchildluke-random-pokemon-team-random-gen1-team-kbwrud.streamlitapp.com/&quot;&gt;Streamlit app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://streamlit.io/&quot;&gt;streamlit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-lists-tuples/#python-lists&quot;&gt;Lists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/list-comprehension-python/#using-list-comprehensions&quot;&gt;List comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/python-find-in-list-how-to-find-the-index-of-an-item-or-element-in-a-list/&quot;&gt;&lt;code&gt;List.index()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/defining-your-own-python-function/&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-json/&quot;&gt;JSON file/object handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-conditional-statements/&quot;&gt;If statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/python-for-loop/&quot;&gt;For loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pynative.com/python-random-sample/&quot;&gt;&lt;code&gt;Random.sample()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Morsel #6: Federer in The Guardian</title><link>https://lukealexdavis.co.uk/posts/morsel-6/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-6/</guid><pubDate>Sat, 09 Jul 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My sixth morsel is a quick script that scrapes The Guardian API for articles featuring &quot;Federer&quot; in the headline. This can, of course, be amended to search for any query in the API but I wanted some article to fill out my &lt;a href=&quot;/jardim/sport/roger-federer/&quot;&gt;Federer wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://requests.readthedocs.io/en/latest/&quot;&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://open-platform.theguardian.com/&quot;&gt;An API key from The Guardian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/starchildluke/federer-in-the-guardian&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Morsel #5: Black fabric</title><link>https://lukealexdavis.co.uk/posts/morsel-5/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-5/</guid><pubDate>Thu, 07 Jul 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My fifth morsel is called Black Fabric and it&apos;s a Python script that generates five randomised names that incorporate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fabric type as the first name&lt;/li&gt;
&lt;li&gt;A common surname of African diasporan descent (ie. Black folks from the Americas (North and Central), the Caribbean, and the UK, whose ancestors were enslaved people)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://streamlit.io/&quot;&gt;streamlit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/starchildluke/black_fabric&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://share.streamlit.io/starchildluke/black_fabric/main/black_fabric.py&quot;&gt;Streamlit app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Credit to &lt;a href=&quot;https://twitter.com/yedoye_/status/1422264318079422466&quot;&gt;@yedoye&lt;/a&gt; for the idea and everyone in the replies.&lt;/p&gt;
</content:encoded></item><item><title>Morsel #4: bulk upload to Internet Archive with waybackpy</title><link>https://lukealexdavis.co.uk/posts/morsel-4/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-4/</guid><pubDate>Wed, 25 May 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My fourth morsel is a way to backup your site to the Internet Archive.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pypi.org/project/waybackpy/&quot;&gt;waybackpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://advertools.readthedocs.io/en/master/&quot;&gt;advertools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/starchildluke/wayback&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I adapted some code from Koray Tuğberk GÜBÜR by using advertools to pull pages from a sitemap and &lt;code&gt;to_list()&lt;/code&gt; over &lt;code&gt;apply()&lt;/code&gt; and a &lt;code&gt;lambda&lt;/code&gt; function when extracting URLs to iterate over. Purely a preference thing.&lt;/p&gt;
&lt;p&gt;Also shout out to &lt;a href=&quot;https://github.com/eliasdabbas/advertools&quot;&gt;Elias Dabbas for the advertools library&lt;/a&gt; which has made sitemap handling in Python so much easier.&lt;/p&gt;
</content:encoded></item><item><title>Morsel #3: a custom font preload fix in WordPress</title><link>https://lukealexdavis.co.uk/posts/morsel-3/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-3/</guid><pubDate>Tue, 24 May 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My third morsel is actually a WordPress fix.&lt;/p&gt;
&lt;p&gt;I decided to write this as I couldn&apos;t find the answer I was looking for myself and thought it might help anyone who had the same problem in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: I realised the custom self-hosted fonts I was using on my WordPress sites weren&apos;t actually loading. I realised this after seeing the following message:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The resource X was preloaded using link preload but not used within a few seconds from the window’s load event. Please make sure it has an appropriate ‘as’ value and it is preloaded intentionally.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That basically means the font loaded but it wasn&apos;t used &lt;em&gt;at all&lt;/em&gt;. I tried all the different things that Stack Overflow said but it still wouldn&apos;t work. Long story short: the @font-face declarations I was making in the main theme CSS file weren&apos;t acknowledged so I put them in the WordPress Customizer panel. To do that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to your Admin panel and then go to Appearance &amp;gt; Customize &amp;gt; Additional CSS&lt;/li&gt;
&lt;li&gt;Enter the appropriate @font-face code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used the following @font-face format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
  font-family: &apos;FontName&apos;;
  src: url(PATH) format(&apos;woff2&apos;);
  src: url(PATH) format(&apos;woff&apos;);
  font-weight: whatever that is;
  font-style: normal;
  font-display: swap;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of the preload code, I recommend the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;link rel=&quot;preload&quot; href=&quot;PATH&quot; type=&quot;font/woff2&quot; as=&quot;font&quot; crossorigin=&quot;&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve gone with woff2 only as it&apos;s widely supported and smaller in file size, which compounds the benefits of preloading for page speed. Just be careful of &lt;a href=&quot;https://fonts.google.com/knowledge/glossary/fout&quot;&gt;FOUT&lt;/a&gt; and set your &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot;&gt;Cache-Control headers&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And make sure to put that ahead of the &lt;code&gt;wp_head()&lt;/code&gt; in your header.php file so it can preload before the CSS (I believe that&apos;s how it works lol).&lt;/p&gt;
</content:encoded></item><item><title>Morsel #2: The YouTube Thumbnail Extractor</title><link>https://lukealexdavis.co.uk/posts/morsel-2/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-2/</guid><pubDate>Sat, 30 Apr 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My second morsel is a Python script that extracts thumbnails from YouTube videos.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/starchildluke/yt_thumbnail&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://share.streamlit.io/starchildluke/yt_thumbnail/main/yt_st.py&quot;&gt;Streamlit app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://requests.readthedocs.io/en/latest/&quot;&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://streamlit.io/&quot;&gt;streamlit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add the URL to extract the thumbnail from and it will display it at the bottom. Currently only works if you put in the full YouTube video URL without any parameters (so not youtu.be or ?t=8 for example). Again, open to suggestions on how to make it work with any valid YouTube URL (as I&apos;m not so great with &lt;a href=&quot;https://docs.python.org/3/library/re.html&quot;&gt;re&lt;/a&gt; yet)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
</content:encoded></item><item><title>Morsel #1: The Tag Suggester</title><link>https://lukealexdavis.co.uk/posts/morsel-1/</link><guid isPermaLink="true">https://lukealexdavis.co.uk/posts/morsel-1/</guid><pubDate>Thu, 14 Apr 2022 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My first morsel is a Python script that extracts all the tags from my blogs and creates randomised Google search URLs for content ideation.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://requests.readthedocs.io/en/latest/&quot;&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://streamlit.io/&quot;&gt;streamlit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/starchildluke/tag_suggester/&quot;&gt;GitHub link&lt;/a&gt;
&lt;a href=&quot;https://share.streamlit.io/starchildluke/tag_suggester/main/tagsuggester.py&quot;&gt;Streamlit app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example from &lt;a href=&quot;https://cultrface.co.uk&quot;&gt;Cultrface&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://google.com/search?q=martin+luther+king+soup&quot;&gt;https://google.com/search?q=martin+luther+king+soup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As they are randomised, some of the results are more nonsense than anything but you never know. That&apos;s the beauty of it—you could end up down a rabbit hole you never knew existed.&lt;/p&gt;
&lt;p&gt;Feel free to fork the repository and make your own version (subject to the AGPL-3.0 License)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: So this script doesn&apos;t update the JSON files containing all the blog tags as I had hoped. Still looking into how to do that but if anyone reading this knows how to update a JSON file via a Streamlit app hosted on GitHub, I&apos;d love to know.&lt;/p&gt;
</content:encoded></item></channel></rss>