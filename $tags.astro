---

// Component Imports
import BaseHead from '../components/BaseHead.astro';
import BlogHeader from '../components/BlogHeader.astro';
import BlogFooter from '../components/BlogFooter.astro';
import site from '../data/site.json'
import { uniq } from '../utils/uniq.js';

export interface Props {
  post: any;
}

// Component Script:
// You can write any JavaScript/TypeScript that you'd like here.
// It will run during the build, but never in the browser.
// All variables are available to use in the HTML template below.
let metaTitle = ' | Luke Alex Davis';
let domain = 'https://lukealexdavis.co.uk';
let title = 'Posts';
let slug = '/blog';
let description = "";

const { collection } = Astro.props;

function postsByYear(posts) {
  const postsByYearMap = posts.reduce(function(acc, post) {
    // get the post's year
    const year = new Date(post.date).getFullYear();
    
    // make sure the year exists in the map
    if (!(year in acc)) {
      acc[year] = {
        year,
        items: []
      }
    }
    
    // add the post into the map
    acc[year].items.push(post);
    
    // make sure you return the value in a reduce()!
    return acc;
  }, { });
  
  // get an array of { year, items } objects, then sort by year
  return Object.values(postsByYearMap)
    .sort((a, b) => b.year - a.year);
}

export async function createCollection() {
    
    function title(tag) {
        return `Posts tagged "${tag}"`;
    }

    function description(tag) {
        return `All posts tagged with “${tag}”`;
    }

    const allPosts = Astro.fetchContent('./posts/*.md');
    const allTags = uniq(allPosts.map(({ tags }) => tags).flat());

    return {
        // `routes` defines the total collection of routes as data objects.
        routes: allTags.map((tag) => {
            const params = {
                name: tag,
                title: title(tag),
                description: description(tag),
            };
            return params;
        }),

        // `permalink` defines the final URL for each route object defined in `routes`.
        permalink: ({ params }) => `/tags/${params.name}`,

        // `data` is now responsible for return the data for each page.
        // Luckily we had already loaded all of the data at the top of the function,
        // so we just filter the data here to group pages by first letter.
        // If you needed to fetch more data for each page, you can do that here as well.
        async data ({ params }) {
            return allPosts.filter(p => p.tags.indexOf(params.name) >= 0).sort((a, b) => new Date(b.date) - new Date(a.date));
        },

        // Finally, `pageSize` and `pagination` is still on by default. Because
        // we don't want to paginate the already-grouped pages a second time, we'll
        // disable pagination.
        pageSize: 25,
    }
}

let prevNext;

let currentPage = collection.page.current
if (collection.page.current == 1) {
  currentPage = "";
  description = "My blog."
  slugPageNum = "";
  slug = slug + "/"
} else {
  currentPage = " (Page " + collection.page.current + ")";
  description = "Page " + collection.page.current + " of the blog listing page.";
  slugPageNum = "/" + collection.page.current + "/";
}

if (collection.page.current == 1 && collection.page.last == collection.page.current) {
  prevNext = [];
}
else if (collection.page.current == 1 && collection.page.last > collection.page.current) {
  prevNext = <div class="page-links"> <a class="next" rel="next" href={collection.url.next + "/"}>Next &raquo;</a></div>;
} else if (collection.page.current > 1 && collection.page.last > collection.page.current) {
    prevNext = <div class="page-links"> <a class="prev" rel="prev" href={collection.url.prev + "/"}>  
&laquo; Prev</a> <a class="next" rel="next" href={collection.url.next + "/"}>Next &raquo;</a></div>;
} else if (collection.page.last) {
    prevNext = <div class="page-links"> <a class="prev" href={collection.url.prev + "/"}>  
&laquo; Prev</a></div>;
  };

---

<html lang="en">
  <head>
    <BaseHead title={title + currentPage + metaTitle} description={description} canonicalURL={domain + slug + slugPageNum} />
    <link rel="stylesheet" href="/blog.css" />

    <style>
      body {
        width: 100%;
        display: flex;
      }

      header {
        width: 100%;
        height: 100%;
        background-color: var(--theme-bg-offset);
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .content {
        margin-bottom: 8rem;
      }

      .content :global(main > * + *) {
        margin-top: 1rem;
      }

      .intro {
        padding-bottom: 1.4rem;
      }

      .intro > * {
        margin: 0;
      }

      .content :global(main > * + *) {
  margin-top: 1rem;
}

.post-listing {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: space-between;
  }

.post-preview {
  padding-bottom: 1rem;
}

.post-listing a {
  max-width: 60%;
}

.publish-date {
  letter-spacing: 2px;
}

header {
  display: flex;
  flex-direction: column;
  text-align: left;
  align-items: flex-start;
  justify-content: center;

  padding-bottom: 2rem;
}

.title,
.author,
.publish-date {
  margin: 0;
}

.publish-date,
.author {
  text-transform: uppercase;
  letter-spacing: 2px;
}

.title {
  font-size: 2.25rem;
  font-weight: 700;
  color: var(--theme-text);
}

    </style>
  </head>

  <body>
    <BlogHeader />
    <div class="layout">
      <article class="content">
        <section class="intro">
          <h1>{title + currentPage}</h1>
        </section>
        <section>
          <p>You can follow these blog posts via <a href="/feed/blog.xml">RSS</a> too.</p>
        </section>

    <section>
      <h2 class="title">{collection.params.title}</h2>
      <small class="count">{collection.start + 1} – {collection.end + 1} of {collection.total}</small>
      <ul class="post-list">
      {collection.data.map((post) => (
            <li class="post-preview post-listing post-list">
              <a href={post.url + "/"}>{post.title}</a>
              <span class="publish-date">{post.date}</span>
            </li>
          ))}
        </ul>
      </section>
        {prevNext}
      </article>
    </div>
    <BlogFooter></BlogFooter>
  </body>
</html>